################################################################################
#
# python2-wheel.cygclass - for building Wheels for Python 2
#
# Part of cygport - Cygwin packaging application
# Copyright (C) 2006-2016 Yaakov Selkowitz
# Provided by the Cygwin Ports project <http://sourceware.org/cygwinports/>
#
# cygport is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cygport is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cygport.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################

#****h* Cygclasses/python2-wheel.cygclass
#  DESCRIPTION
#  Wheels are the new standard for installing Python libraries and programs.
#  The build is defined by a setup.py file in the top source directory, which
#  controls the installation of files and the building of C Python extensions.
#  Many such packages are hosted on the Python Package Index (PyPI).
#
#  This cygclass handles the building of wheel-based Python 2 packages, for
#  use by packages which do not yet support Python 3, or for backport module
#  packages which are not needed with Python 3.  Python module packages which
#  support both Python 2 and 3 should use python-wheel.cygclass instead.
#  EXAMPLE
#    inherit python2-wheel
#    
#    NAME="python-futures"
#    VERSION=3.1.1
#    RELEASE=1
#    CATEGORY="Python"
#    SUMMARY="Backport of Python concurrent.futures to 2.7"
#    DESCRIPTION="The concurrent.futures module provides a high-level interface
#    for asynchronously executing callables.  This module is a backport for
#    Python 2.7."
#    
#    ARCH=noarch
#  INHERITS
#  python2.cygclass
#  REQUIRES
#  python2, python2-pip
#****
ORIG_PN=${ORIG_PN:-${PN#python*-}}
PYTHON_WHEEL_NAME=${PYTHON_WHEEL_NAME:-${NAME#python*-}}

inherit python.org python2

check_prog_req pip2 python2-pip

#****o* python2-wheel.cygclass/PKG_NAMES (python2-wheel)
#  DESCRIPTION
#  For a NAME beginning with "python-", e.g python-foo, a single python2-foo
#  binary packages is created automatically.
#****
if ! inherited python-wheel && [ ${NAME%%-*} = "python" ]
then
_CYGPORT_INTERNAL_multi_doc_=1
PKG_NAMES="python2-${PYTHON_WHEEL_NAME}"
declare -g python2_${PYTHON_WHEEL_NAME//[-\.]/_}_OBSOLETES="python-${PYTHON_WHEEL_NAME}"
declare -g python2_${PYTHON_WHEEL_NAME//[-\.]/_}_CONTENTS="*"
fi

#****C* python2-wheel.cygclass/python2_wheel_compile
#  SYNOPSIS
#  python2_wheel_compile [OPTIONS]
#  DESCRIPTION
#  Runs the setup.py 'bdist_wheel' command, to which any arguments are passed.
#****
python2_wheel_compile() {
	if [ ! -e setup.py ]
	then
		error "No Python Distutils module detected"
	fi

	[ ! -d build/lib ] || find build/lib -delete
	# setuptools.launch imports setuptools hooks regardles of setup.py
	${PYTHON2} -msetuptools.launch setup.py bdist_wheel "${@}" || error "setup.py bdist_wheel failed"
}

#****I* python2-wheel.cygclass/python2_wheel_install
#  SYNOPSIS
#  python2_wheel_install [OPTIONS]
#  DESCRIPTION
#  Installs the previously built wheel into $D with 'pip2 install'.
#****
python2_wheel_install() {
	local whl2

	if [ ! -e setup.py ]
	then
		error "No Python Distutils module detected"
	fi

	if [ -f dist/*-py2.py3*-none-any.whl ]
	then
		# Universal wheels can be installed on both versions of Python
		whl2="*-py2.py3*-none-any.whl"
	elif [ -f dist/*-py2-none-any.whl ]
	then
		# not all noarch wheels are officially universal
		whl2="*-py2-none-any.whl"
	elif [ -f dist/*-cp${PYTHON2_VERSION/.}-*cygwin_*_${ARCH}.whl ]
	then
		whl2="*-cp${PYTHON2_VERSION/.}-*cygwin_*_${ARCH}.whl"
	else
		error "unknown wheel filename"
	fi

	# ENSUREPIP_OPTIONS not present: pip, pipX, pipX.Y, easy_install, easy_install-X.Y
	# ENSUREPIP_OPTIONS=altinstall: pipX.Y, easy_install-X.Y
	# ENSUREPIP_OPTIONS=install: pipX, pipX.Y, easy_install-X.Y

	ENSUREPIP_OPTIONS="install" \
	pip2 install -I dist/${whl2} --root ${D} --prefix /usr --no-compile --no-deps || error "pip2 install failed"
}

#****o* python2-wheel.cygclass/src_compile (python2-wheel)
#  DEFINITION
src_compile() {
	lndirs
	cd ${B}
	python2_wheel_compile
}
#****

#****o* python2-wheel.cygclass/src_install (python2-wheel)
#  DEFINITION
src_install() {
	cd ${B}
	python2_wheel_install
}
#****

readonly -f python2_wheel_compile python2_wheel_install
